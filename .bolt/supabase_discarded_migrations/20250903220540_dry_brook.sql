/*
  # Pillar 1: Core Inventory Schema Migration

  ## Overview
  This migration establishes the foundational database schema for the inventory management system.
  It implements the core tables for product catalog, locations, and inventory tracking.

  ## Tables Created
  1. `ubicaciones` - Physical locations where inventory is stored (bar, warehouse, etc.)
  2. `productos` - Master catalog of all products, ingredients, and recipes
  3. `inventario` - Junction table linking products to locations with stock quantities

  ## Key Features
  - UUID primary keys with auto-generation
  - Proper foreign key relationships with CASCADE deletion
  - Unit conversion support (ml as base unit)
  - Recipe vs ingredient differentiation
  - External POS system integration support
  - Performance indexes
  - Row Level Security (RLS) enabled
  - Basic authentication policies

  ## Security
  - RLS enabled on all tables
  - Authenticated users have full access (can be refined later)
*/

-- ========= TABLA 1: UBICACIONES =========
-- Almacena los lugares físicos donde puede haber stock.
CREATE TABLE IF NOT EXISTS public.ubicaciones (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    nombre TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

COMMENT ON TABLE public.ubicaciones IS 'Define las ubicaciones físicas del inventario (ej: barra, bodega).';

-- ========= TABLA 2: PRODUCTOS =========
-- El catálogo maestro de todos los productos, sean ingredientes o recetas.
CREATE TABLE IF NOT EXISTS public.productos (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    nombre TEXT NOT NULL UNIQUE,
    costo_unitario NUMERIC NOT NULL DEFAULT 0,
    -- Columna clave para la conversión de unidades a ml
    capacidad_ml_por_unidad NUMERIC NOT NULL DEFAULT 1,
    -- Columna clave para la lógica de recetas
    es_receta BOOLEAN NOT NULL DEFAULT false,
    -- Para el mapeo con sistemas POS externos
    id_producto_externo TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

COMMENT ON TABLE public.productos IS 'Catálogo maestro de productos, ingredientes y recetas.';

-- Crear un índice en id_producto_externo para búsquedas rápidas
CREATE INDEX IF NOT EXISTS idx_productos_id_externo ON public.productos(id_producto_externo);

-- ========= TABLA 3: INVENTARIO =========
-- Tabla que une productos y ubicaciones para registrar el stock en ML.
CREATE TABLE IF NOT EXISTS public.inventario (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    producto_id UUID NOT NULL REFERENCES public.productos(id) ON DELETE CASCADE,
    ubicacion_id UUID NOT NULL REFERENCES public.ubicaciones(id) ON DELETE CASCADE,
    -- El stock siempre se almacena en la unidad base (ml) para consistencia
    cantidad_ml NUMERIC NOT NULL DEFAULT 0,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    -- Asegura que solo haya una entrada por producto en cada ubicación
    UNIQUE (producto_id, ubicacion_id)
);

COMMENT ON TABLE public.inventario IS 'Registra el stock (en ml) de cada producto en cada ubicación.';

-- ========= HABILITAR RLS (Row Level Security) =========
ALTER TABLE public.ubicaciones ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.productos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.inventario ENABLE ROW LEVEL SECURITY;

-- ========= POLÍTICAS BÁSICAS DE ACCESO =========
-- Por ahora, permitir acceso a usuarios autenticados. Se pueden refinar después.
CREATE POLICY "Allow authenticated users to manage locations" ON public.ubicaciones FOR ALL TO authenticated USING (true);
CREATE POLICY "Allow authenticated users to manage products" ON public.productos FOR ALL TO authenticated USING (true);
CREATE POLICY "Allow authenticated users to manage inventory" ON public.inventario FOR ALL TO authenticated USING (true);